# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    # bind:
    #     $databasePrefix: '%database_prefix%'
    #     $defaultLocale: '%kernel.default_locale%'
    #     $feedbackMail: '%feedback_mail%'
    #     $runalyzeVersion: '%RUNALYZE_VERSION%'
    #     $userCanRegister: '%user_can_register%'
    #     $userDisableAccountActivation: '%user_disable_account_activation%'
    #     $backupStoragePeriod: '%backup_storage_period%'
    #     $posterStoragePeriod: '%poster_storage_period%'
    #     $dataDirectory: '%data_directory%'
    #     $kernelRootDir: '%kernel.root_dir%'
    #     $legacyCachePath: '%data_directory%'
    #     $projectDirectory: '%kernel.project_dir%'
    #     $srtmDirectory: "%data_directory%/srtm"
    #     $inkscapePath: '%inkscape_path%'
    #     $pathToFitPerlScript: "%kernel.project_dir%/call/perl/fittorunalyze.pl"
    #     $pathToPerl: "%perl_path%"
    #     $pathToTtbincnv: "%kernel.project_dir%/app/%ttbin_path%"
    #     $python3Path: '%python3_path%'
    #     $rsvgPath: '%rsvg_path%'
    #     $spatialiteExtensionName: "%sqlite_mod_spatialite%"
    #     $timezoneDatabasePath: "%data_directory%/timezone.sqlite"
    #     $darkSkyApiKey: "%darksky_api_key%"
    #     $garminApiKey: "%garmin_api_key%"
    #     $geonamesUsername: "%geonames_username%"
    #     $openWeatherMapApiKey: "%openweathermap_api_key%"

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            # - '../src/Kernel.php'
            - '../src/CoreBundle/'

    # Runalyze\Bundle\CoreBundle\:
    #     resource: '../src/CoreBundle/*'
    #     exclude: '../src/CoreBundle/{Entity,Controller}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # Runalyze\Bundle\CoreBundle\Controller\:
    #     resource: '../src/CoreBundle/Controller/*'
    #     public: true
    #     tags: ['controller.service_arguments']

    # # add more service definitions when explicit configuration is needed
    # # please note that last definitions always *replace* previous ones

    # Doctrine\ORM\EntityManager:
    #     alias: doctrine.orm.default_entity_manager
    #     public: false

    # GuzzleHttp\Client: ~

    # Monolog\Formatter\LineFormatter:
    #     arguments:
    #     - "[%%datetime%%] [%%extra.token%%] %%channel%%.%%level_name%%: %%message%% %%context%% %%extra%%\n"

    # Runalyze\Bundle\CoreBundle\ArgumentResolver\AccountValueResolver:
    #     autoconfigure: false
    #     tags: [ {name: controller.argument_value_resolver, priority: 50} ]

    # Runalyze\Bundle\CoreBundle\EntityListener\:
    #     resource: '../src/CoreBundle/EntityListener/*Listener.php'
    #     tags: [ {name: doctrine.orm.entity_listener, lazy: true} ]
    # Runalyze\Bundle\CoreBundle\EntityListener\EquipmentUpdateSubscriber:
    #     tags: [ {name: doctrine.event_subscriber, connection: default, lazy: true} ]

    # Runalyze\Bundle\CoreBundle\EventListener\AccountLastActionListener:
    #     tags: [ {name: kernel.event_listener, event: kernel.controller, method: onCoreController} ]
    # Runalyze\Bundle\CoreBundle\EventListener\ConsoleErrorStatusListener:
    #     tags: [ {name: kernel.event_listener, event: console.terminate} ]
    # Runalyze\Bundle\CoreBundle\EventListener\ConsoleExceptionListener:
    #     tags: [ {name: kernel.event_listener, event: console.exception} ]
    # Runalyze\Bundle\CoreBundle\EventListener\LocaleListener:
    #     tags: [ {name: kernel.event_subscriber} ]
    # Runalyze\Bundle\CoreBundle\EventListener\MaintenanceListener:
    #     lazy: true # TODO: patches the container loading the default configuration list while building the container (ValueExtension)
    #     tags: [ {name: kernel.event_listener, event: kernel.request, method: onKernelRequest} ]
    # Runalyze\Bundle\CoreBundle\EventListener\RecalculationTasksPerformerListener:
    #     tags: [ {name: kernel.event_listener, event: kernel.terminate, method: onTerminate} ]
    # Runalyze\Bundle\CoreBundle\EventListener\TablePrefixSubscriber:
    #     tags: [ {name: doctrine.event_subscriber} ]
    # Runalyze\Bundle\CoreBundle\EventListener\UserLocaleListener:
    #     tags: [ {name: kernel.event_listener, event: security.interactive_login, method: onInteractiveLogin} ]
    # Runalyze\Bundle\CoreBundle\EventListener\UserTimezoneListener:
    #     tags: [ {name: kernel.event_listener, event: kernel.request, method: onKernelRequest} ]

    # Runalyze\Bundle\CoreBundle\Form\Type\ElevationType:
    #     arguments: ["@app.unit_system.elevation"]

    # Runalyze\Bundle\CoreBundle\Queue\Receiver\BackupReceiver:
    #     public: true
    # Runalyze\Bundle\CoreBundle\Queue\Receiver\PosterReceiver:
    #     public: true
    #     tags:
    #     - { name: monolog.logger, channel: queue }

    # Runalyze\Bundle\CoreBundle\Repository\:
    #     resource: '%kernel.project_dir%/src/CoreBundle/Repository/*'
    #     public: true

    # Runalyze\Bundle\CoreBundle\Services\AccountMailer:
    #     calls: [ [setFrom, ["%mail_sender%", "%mail_name%"]] ]
    # Runalyze\Bundle\CoreBundle\Services\Configuration\ConfigurationUpdater:
    #     lazy: true
    # Runalyze\Bundle\CoreBundle\Services\Import\ActivityCache:
    #     arguments:
    #     $cache: "@app.cache.activity_uploads"
    # Runalyze\Bundle\CoreBundle\Services\Import\ActivityDataContainerFilter:
    #     tags: [ {name: monolog.logger, channel: activity_uploads} ]
    # Runalyze\Bundle\CoreBundle\Services\Import\FileImporter:
    #     tags: [ {name: monolog.logger, channel: activity_uploads} ]
    # Runalyze\DEM\Reader:
    #     alias: 'Runalyze\Bundle\CoreBundle\Services\Import\GeoTiffReader'
    # Runalyze\Bundle\CoreBundle\Services\Import\TimezoneLookup:
    #     arguments:
    #     $silentExceptions: true
    # Runalyze\Bundle\CoreBundle\Services\Recalculation\RecalculationManager:
    #     lazy: true
    # Runalyze\Bundle\CoreBundle\Services\SessionRequestProcessor:
    #     tags: [ {name: monolog.processor, method: processRecord} ]

    # Runalyze\Bundle\CoreBundle\Tests\DataFixtures\:
    #     resource: '../tests/CoreBundle/DataFixtures'

    # Runalyze\Metrics\Distance\Unit\AbstractDistanceUnit:
    #     factory: 'Runalyze\Bundle\CoreBundle\Services\UnitSystemFactory:getDistanceUnit'
    # app.unit_system.elevation:
    #     class: Runalyze\Metrics\Distance\Unit\AbstractDistanceUnit
    #     factory: 'Runalyze\Bundle\CoreBundle\Services\UnitSystemFactory:getElevationUnit'
    # Runalyze\Metrics\Energy\Unit\AbstractEnergyUnit:
    #     factory: 'Runalyze\Bundle\CoreBundle\Services\UnitSystemFactory:getEnergyUnit'
    # Runalyze\Metrics\Temperature\Unit\AbstractTemperatureUnit:
    #     factory: 'Runalyze\Bundle\CoreBundle\Services\UnitSystemFactory:getTemperatureUnit'
    # Runalyze\Metrics\Velocity\Unit\AbstractPaceInDecimalFormatUnit:
    #     factory: 'Runalyze\Bundle\CoreBundle\Services\UnitSystemFactory:getWindSpeedUnit'
    # Runalyze\Metrics\Weight\Unit\AbstractWeightUnit:
    #     factory: 'Runalyze\Bundle\CoreBundle\Services\UnitSystemFactory:getWeightUnit'

    # Runalyze\:
    #     resource: '../inc/core/*'

    # Runalyze\Service\ElevationCorrection\Strategy\Geonames:
    #     tags: [ {name: monolog.logger, channel: external_services} ]
    # Runalyze\Service\ElevationCorrection\Strategy\GoogleMaps:
    #     tags: [ {name: monolog.logger, channel: external_services} ]

    # Runalyze\Service\WeatherForecast\DatabaseCacheInterface:
    #     alias: 'Runalyze\Bundle\CoreBundle\Repository\WeathercacheRepository'
    # Runalyze\Service\WeatherForecast\Strategy\DarkSky:
    #     tags: [ {name: monolog.logger, channel: external_services} ]
    # Runalyze\Service\WeatherForecast\Strategy\OpenWeatherMap:
    #     tags: [ {name: monolog.logger, channel: external_services} ]